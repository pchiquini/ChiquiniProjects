DROP SEQUENCE F15F4_Auth_seq ; 
create sequence F15F4_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Auth_PK_trig 
before insert on F15F4_Auth
for each row 
begin 
select F15F4_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15F4_Auth add created date ; 
alter table F15F4_Auth add created_by VARCHAR2 (255) ; 
alter table F15F4_Auth add row_version_number integer ; 
alter table F15F4_Auth add updated date ; 
alter table F15F4_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Auth_AUD_trig 
before insert or update on F15F4_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Comment_seq ; 
create sequence F15F4_Comment_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Comment_PK_trig 
before insert on F15F4_Comment
for each row 
begin 
select F15F4_Comment_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15F4_Comment add created date ; 
alter table F15F4_Comment add created_by VARCHAR2 (255) ; 
alter table F15F4_Comment add row_version_number integer ; 
alter table F15F4_Comment add updated date ; 
alter table F15F4_Comment add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Comment_AUD_trig 
before insert or update on F15F4_Comment 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Contact_seq ; 
create sequence F15F4_Contact_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Contact_PK_trig 
before insert on F15F4_Contact
for each row 
begin 
select F15F4_Contact_seq.nextval into :new.contact_id from dual; 
end; 
/
alter table F15F4_Contact add created date ; 
alter table F15F4_Contact add created_by VARCHAR2 (255) ; 
alter table F15F4_Contact add row_version_number integer ; 
alter table F15F4_Contact add updated date ; 
alter table F15F4_Contact add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Contact_AUD_trig 
before insert or update on F15F4_Contact 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Doc_seq ; 
create sequence F15F4_Doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Doc_PK_trig 
before insert on F15F4_Doc
for each row 
begin 
select F15F4_Doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15F4_Doc add created date ; 
alter table F15F4_Doc add created_by VARCHAR2 (255) ; 
alter table F15F4_Doc add row_version_number integer ; 
alter table F15F4_Doc add updated date ; 
alter table F15F4_Doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Doc_AUD_trig 
before insert or update on F15F4_Doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Emp_seq ; 
create sequence F15F4_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Emp_PK_trig 
before insert on F15F4_Emp
for each row 
begin 
select F15F4_Emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15F4_Emp add created date ; 
alter table F15F4_Emp add created_by VARCHAR2 (255) ; 
alter table F15F4_Emp add row_version_number integer ; 
alter table F15F4_Emp add updated date ; 
alter table F15F4_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Emp_AUD_trig 
before insert or update on F15F4_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Hist_seq ; 
create sequence F15F4_Hist_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Hist_PK_trig 
before insert on F15F4_Hist
for each row 
begin 
select F15F4_Hist_seq.nextval into :new.hist_id from dual; 
end; 
/
alter table F15F4_Hist add created date ; 
alter table F15F4_Hist add created_by VARCHAR2 (255) ; 
alter table F15F4_Hist add row_version_number integer ; 
alter table F15F4_Hist add updated date ; 
alter table F15F4_Hist add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Hist_AUD_trig 
before insert or update on F15F4_Hist 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Lab_seq ; 
create sequence F15F4_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Lab_PK_trig 
before insert on F15F4_Lab
for each row 
begin 
select F15F4_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15F4_Lab add created date ; 
alter table F15F4_Lab add created_by VARCHAR2 (255) ; 
alter table F15F4_Lab add row_version_number integer ; 
alter table F15F4_Lab add updated date ; 
alter table F15F4_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Lab_AUD_trig 
before insert or update on F15F4_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_RFE_seq ; 
create sequence F15F4_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_RFE_PK_trig 
before insert on F15F4_RFE
for each row 
begin 
select F15F4_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15F4_RFE add created date ; 
alter table F15F4_RFE add created_by VARCHAR2 (255) ; 
alter table F15F4_RFE add row_version_number integer ; 
alter table F15F4_RFE add updated date ; 
alter table F15F4_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_RFE_AUD_trig 
before insert or update on F15F4_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Role_seq ; 
create sequence F15F4_Role_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Role_PK_trig 
before insert on F15F4_Role
for each row 
begin 
select F15F4_Role_seq.nextval into :new.role_id from dual; 
end; 
/
alter table F15F4_Role add created date ; 
alter table F15F4_Role add created_by VARCHAR2 (255) ; 
alter table F15F4_Role add row_version_number integer ; 
alter table F15F4_Role add updated date ; 
alter table F15F4_Role add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Role_AUD_trig 
before insert or update on F15F4_Role 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Status_seq ; 
create sequence F15F4_Status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Status_PK_trig 
before insert on F15F4_Status
for each row 
begin 
select F15F4_Status_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15F4_Status add created date ; 
alter table F15F4_Status add created_by VARCHAR2 (255) ; 
alter table F15F4_Status add row_version_number integer ; 
alter table F15F4_Status add updated date ; 
alter table F15F4_Status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Status_AUD_trig 
before insert or update on F15F4_Status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F4_Task_seq ; 
create sequence F15F4_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F4_Task_PK_trig 
before insert on F15F4_Task
for each row 
begin 
select F15F4_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15F4_Task add created date ; 
alter table F15F4_Task add created_by VARCHAR2 (255) ; 
alter table F15F4_Task add row_version_number integer ; 
alter table F15F4_Task add updated date ; 
alter table F15F4_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F4_Task_AUD_trig 
before insert or update on F15F4_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15F4_Emp_emp_id_FK_0 ;
CREATE INDEX F15F4_Emp_emp_id_FK_0 ON F15F4_Comment(F15F4_Emp_emp_id) ;
DROP INDEX F15F4_RFE_rfe_id_FK_1 ;
CREATE INDEX F15F4_RFE_rfe_id_FK_1 ON F15F4_Comment(F15F4_RFE_rfe_id) ;
DROP INDEX F15F4_Emp_emp_id_FK_2 ;
CREATE INDEX F15F4_Emp_emp_id_FK_2 ON F15F4_Contact(F15F4_Emp_emp_id) ;
DROP INDEX F15F4_RFE_rfe_id_FK_3 ;
CREATE INDEX F15F4_RFE_rfe_id_FK_3 ON F15F4_Contact(F15F4_RFE_rfe_id) ;
DROP INDEX F15F4_Role_role_id_FK_4 ;
CREATE INDEX F15F4_Role_role_id_FK_4 ON F15F4_Contact(F15F4_Role_role_id) ;
DROP INDEX F15F4_RFE_rfe_id_FK_5 ;
CREATE INDEX F15F4_RFE_rfe_id_FK_5 ON F15F4_Doc(F15F4_RFE_rfe_id) ;
DROP INDEX F15F4_Auth_auth_id_FK_6 ;
CREATE INDEX F15F4_Auth_auth_id_FK_6 ON F15F4_Emp(F15F4_Auth_auth_id) ;
DROP INDEX F15F4_Lab_lab_id_FK_7 ;
CREATE INDEX F15F4_Lab_lab_id_FK_7 ON F15F4_Emp(F15F4_Lab_lab_id) ;
DROP INDEX F15F4_Emp_emp_id_FK_8 ;
CREATE INDEX F15F4_Emp_emp_id_FK_8 ON F15F4_Hist(F15F4_Emp_emp_id) ;
DROP INDEX F15F4_RFE_rfe_id_FK_9 ;
CREATE INDEX F15F4_RFE_rfe_id_FK_9 ON F15F4_Hist(F15F4_RFE_rfe_id) ;
DROP INDEX F15F4_Status_status_id_FK_10 ;
CREATE INDEX F15F4_Status_status_id_FK_10 ON F15F4_Hist(F15F4_Status_status_id) ;
DROP INDEX F15F4_Emp_emp_id_FK_11 ;
CREATE INDEX F15F4_Emp_emp_id_FK_11 ON F15F4_RFE(F15F4_Emp_emp_id) ;
DROP INDEX F15F4_Task_task_id_FK_12 ;
CREATE INDEX F15F4_Task_task_id_FK_12 ON F15F4_RFE(F15F4_Task_task_id) ;
